#include "Parser.hpp"

void Parser::setOutputFile(std::string fileName)
{
    outputFile = new std::ofstream(); // 申请内存
    std::string folderPath = fileName.substr(0, fileName.find_last_of("/\\"));
    std::filesystem::create_directories(folderPath);
    outputFile->open(fileName, std::ios::trunc);
    if (!outputFile->is_open())
    {
        perror("打开文件失败");
    }

    *outputFile << "Generated by \n"
                << "```text\n"
                << BANNER
                << "\n```\n";

    // 向outFile写入当前时间
    std::time_t currentTime = std::time(nullptr);
    *outputFile << "Generate time: " << std::asctime(std::localtime(&currentTime));
    outputFile->flush();
}

void readInputToken(std::list<Token> &inputTokens, std::ifstream &tokenStream)
{
    std::string line;

    while (std::getline(tokenStream, line))
    {
        std::stringstream ss(line);
        Token token;
        ss >> token;
        inputTokens.push_back(token);
    }
}

void Parser::grammarAnalysis(std::string tokenFile, ParseTab &parseTab)
{
    std::ifstream tokenStream(tokenFile);
    if (!tokenStream.is_open())
    {
        perror("Token File打开失败");
    }

    std::stack<int> stateStack;
    std::stack<Token> tokenStack;
    std::list<Token> inputTokens;
    stateStack.push(0);
    tokenStack.push(Token(END_SYMBOL, "", 0, 0));

    readInputToken(inputTokens, tokenStream);
    inputTokens.push_back(Token(END_SYMBOL, "", 0, 0));

    while (true)
    {
        int currentState = stateStack.top();
        Token token = inputTokens.front();

        Action action = parseTab.getNextAction(currentState, token.type);
        if (action.type == ActionType::A_Shift) // 移入
        {
            stateStack.push(action.data);
            tokenStack.push(token);
            inputTokens.pop_front();
        }
        else if (action.type == ActionType::A_Reduce) // 规约
        {
                }
        else if (action.type == ActionType::A_Error)
        {
            *outputFile << "Error!" << std::endl;
            break;
        }
    }
}