/* Program */
program  → A basic id() block
A        → ε{offset=0;}
block    → { decls stmts }

/* Declaration */
decls    → decl decls
decls    → ε
decl     → type id;{top.put(id.lexeme, type.type, offset);} 

type     → basic B array{type.type=array.type; type.width=array.width;}
B        → ε{t=basic.type; w=basic.width}
array    → ε{array.type=t; array.width=w;}
array    → [num]array{array.type = array(num.val, array1.type); array.width = num.val * array1.width; }
basic    → float{basic.type=float; basic.width=4}
basic    → int{basic.type=int; basic.width=4}
basic    → real{basic.type=real; basic.width=8}

/* Statement */
stmts    → stmt M stmts1 {backPatch(stmt.nextlist, M.instr); stmts.nextlist=stmts1.nextlist;}
stmts    → ε
stmt     → id = expr; {gen(top.get(id.lexeme) '=' expr.addr;)}
stmt     → if ( bool ) M stmt1	{backpatch(bool.truelist, M.instr); 
				stmt.nextlist=merge(bool.falselist, stmt1.nextlist);}

stmt     → if ( bool ) M1 stmt1 N else M2 stmt2 
				{backpatch(bool.truelist, M1.instr); 
				backpatch(bool.falselist, M2.instr);
				temp=merge(stmt1.nextlist, N.nextlist);
				stmt.nextlist=merge(temp, stmt2.nextlist);}

stmt     → while M1 ( bool ) M2 stmt1
				{backpatch(stmt1.truelist, M1.instr); 
				backpatch(bool.truelist, M2.instr);
				stmt.nextlist=bool.falselist;
				gen('goto' M1.instr);}

stmt     → do M stmt while ( bool ) ;
				{
					backpatch(bool.truelist, M.instr);
					stmt.nextlist=bool.falselist;
				}
stmt     → break ;
				{
					stmt.nextlist=makelist(nextinstr);
					gen('goto_');
				}
				
M        → ɛ {M.instr=nextinstr;}

N        → ɛ {N.nextlist=makelist(nextinstr); gen('goto_____');}

/* Condition Expressions */
bool     → true {bool.truelist=makelist(nextinstr); gen('goto_____');}
bool     → false
bool     → bool||bool | bool&& bool | ! bool | (bool) 
/* Arithmetic Expressions */
expr     → expr1 + expr2 {expr.addr= new Temp(); gen(expr.addr '=' expr1.addr '+' expr2.addr);}

expr     → expr1 - expr2 | expr1 * expr2 | expr1 / expr2 | -expr1

expr     → (expr1) {expr.addr=expr1.addr}
expr     → id {expr.addr = top.get(id.lexeme)}
expr     → num {expr.addr = top.get(num.lexval)}


stmt     → loc = expr;
loc      → loc [ expr ]
        {
            loc.lexeme = loc1.lexeme;
		    loc.type = get_elem(loc1.type);
		    t = new Temp( );  
		    loc.addr = new Temp( );
		    gen(t ‘=’ expr.addr ‘*’ get_width(loc.type));
		    gen(loc.addr ‘=’ loc1.addr ‘+’ t); 
        }
loc      → id [ expr ]
        {
            loc.lexeme = top.get(id.lexeme);
		    loc.type = get_elem(id.type);
		    loc.addr = new Temp();
   		    gen(loc.addr ‘=’ expr.addr ‘*’ get_width(loc.type)); 
        }
expr     → loc {expr.addr = new Temp( );
		        gen(expr.addr ‘=’ loc.lexeme ‘[’ L.addr ‘]’);}