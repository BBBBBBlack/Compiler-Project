/* Program */
program  → A basic id() block
A        → ε{offset=0;}
block    → { decls stmts }

/* Declaration */
decls    → decl decls
decls    → ε
decl     → type id;{top.put(id.lexeme, type.type, offset);} 

type     → basic B array{type.type=array.type; type.width=array.width;}
B        → ε{t=basic.type; w=basic.width}
array    → ε{array.type=t; array.width=w;}
array    → [num]array{array.type = array(num.val, array1.type); array.width = num.val * array1.width; }
basic    → float{basic.type=float; basic.width=4}
basic    → int{basic.type=int; basic.width=4}
basic    → real{basic.type=real; basic.width=8}

/* Statement */
stmts    → stmt stmts
stmts    → ε
stmt     → id = expr; {gen(top.get(id.lexeme) '=' expr.addr;)}

/* Arithmetic Expressions */
expr     → expr1 + expr2 {expr.addr= new Temp(); gen(expr.addr '=' expr1.addr '+' expr2.addr);}

expr     → expr1 - expr2 | expr1 * expr2 | expr1 / expr2 | -expr1

expr     → (expr1) {expr.addr=expr1.addr}
expr     → id {expr.addr = top.get(id.lexeme)}
expr     → num {expr.addr = top.get(num.lexval)}